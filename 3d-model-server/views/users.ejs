<!DOCTYPE html>
<html lang="zh">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>数据库后台管理</title>
    <link rel="icon" type="image/svg+xml" href="/database-solid.svg">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <style>
        @keyframes rainbowBackground {
            0% {
                background-position: 0% 50%;
            }

            50% {
                background-position: 100% 50%;
            }

            100% {
                background-position: 0% 50%;
            }
        }

        body {
            font-family: Arial, sans-serif;
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            position: relative;
            min-height: 100vh;
            background: linear-gradient(45deg,
                    rgba(255, 0, 0, 0.1),
                    rgba(255, 165, 0, 0.1),
                    rgba(255, 255, 0, 0.1),
                    rgba(0, 255, 0, 0.1),
                    rgba(0, 255, 255, 0.1),
                    rgba(0, 0, 255, 0.1),
                    rgba(238, 130, 238, 0.1),
                    rgba(255, 0, 0, 0.1));
            background-size: 800% 800%;
            animation: rainbowBackground 20s linear infinite;
        }

        body::before {
            content: '';
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(45deg,
                    rgba(255, 0, 0, 0.05),
                    rgba(255, 165, 0, 0.05),
                    rgba(255, 255, 0, 0.05),
                    rgba(0, 255, 0, 0.05),
                    rgba(0, 255, 255, 0.05),
                    rgba(0, 0, 255, 0.05),
                    rgba(238, 130, 238, 0.05),
                    rgba(255, 0, 0, 0.05));
            background-size: 800% 800%;
            animation: rainbowBackground 20s linear infinite;
            z-index: -2;
        }

        .container {
            background: linear-gradient(145deg, rgba(255, 255, 255, 0.95), rgba(248, 250, 252, 0.95));
            padding: 30px;
            border-radius: 16px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            margin-bottom: 30px;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(226, 232, 240, 0.8);
            transition: all 0.3s ease;
            opacity: 0;
            animation: fadeInUp 0.6s ease forwards;
        }

        .container:nth-child(1) {
            animation-delay: 0.2s;
        }

        .container:nth-child(2) {
            animation-delay: 0.4s;
        }

        h1 {
            color: #2d3748;
            text-align: center;
            margin-bottom: 30px;
            font-size: 2.2em;
            font-weight: 600;
            background: linear-gradient(90deg,
                    rgba(255, 0, 0, 0.1),
                    rgba(255, 165, 0, 0.1),
                    rgba(255, 255, 0, 0.1),
                    rgba(0, 255, 0, 0.1),
                    rgba(0, 255, 255, 0.1),
                    rgba(0, 0, 255, 0.1),
                    rgba(238, 130, 238, 0.1),
                    rgba(255, 0, 0, 0.1));
            background-size: 800% 100%;
            animation: rainbowGradient 20s linear infinite;
            padding: 20px;
            border-radius: 12px;
            opacity: 0;
            animation: fadeInUp 0.6s ease forwards, rainbowGradient 20s linear infinite;
            animation-delay: 0.1s;
        }

        h2 {
            color: #2d3748;
            margin-top: 30px;
            margin-bottom: 20px;
            font-size: 1.5em;
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: 12px;
            opacity: 0;
            animation: fadeInUp 0.6s ease forwards;
            animation-delay: 0.3s;
        }

        h2 i {
            color: #3182ce;
        }

        table {
            width: 100%;
            border-collapse: separate;
            border-spacing: 0;
            margin-top: 20px;
            background: rgba(255, 255, 255, 0.8);
            border-radius: 12px;
            overflow: hidden;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
            table-layout: fixed;
            opacity: 0;
            animation: fadeInUp 0.6s ease forwards;
            animation-delay: 0.7s;
        }

        th,
        td {
            padding: 16px;
            text-align: left;
            border-bottom: 1px solid #e2e8f0;
            word-break: break-word;
        }

        th:first-child,
        td:first-child {
            width: 10%;
        }

        th:nth-child(2),
        td:nth-child(2),
        th:nth-child(3),
        td:nth-child(3) {
            width: 30%;
        }

        th:last-child,
        td:last-child {
            width: 30%;
            min-width: 200px;
        }

        th {
            background: linear-gradient(135deg, #3182ce, #4299e1);
            color: white;
            font-weight: 500;
        }

        tr:hover {
            background: rgba(49, 130, 206, 0.05);
            transition: all 0.3s ease;
        }

        .refresh-btn {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
            padding: 8px 16px;
            background: linear-gradient(135deg, #3182ce, #4299e1);
            color: white;
            border: none;
            border-radius: 12px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(49, 130, 206, 0.3);
            position: relative;
            overflow: hidden;
            z-index: 1;
            opacity: 0;
            animation: fadeInUp 0.6s ease forwards;
            animation-delay: 0.5s;
        }

        .refresh-btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(135deg, #4299e1, #63b3ed);
            z-index: -1;
            transition: transform 0.3s ease;
            transform: scaleX(0);
            transform-origin: right;
        }

        .refresh-btn:hover::before {
            transform: scaleX(1);
            transform-origin: left;
        }

        .refresh-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(49, 130, 206, 0.4);
        }

        .refresh-btn:active {
            transform: translateY(1px);
            box-shadow: 0 2px 10px rgba(49, 130, 206, 0.3);
        }

        .refresh-btn i {
            font-size: 18px;
        }

        .action-btn {
            padding: 8px 12px;
            margin: 0 4px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            gap: 6px;
            white-space: nowrap;
            position: relative;
            overflow: hidden;
            z-index: 1;
            opacity: 0;
            animation: fadeInUp 0.6s ease forwards;
        }

        .action-btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: -1;
            transition: transform 0.3s ease;
            transform: scaleX(0);
            transform-origin: right;
        }

        .action-btn:nth-child(1) {
            animation-delay: 0.8s;
        }

        .action-btn:nth-child(2) {
            animation-delay: 0.9s;
        }

        td:last-child {
            display: flex;
            justify-content: flex-start;
            align-items: center;
            gap: 8px;
        }

        .edit-btn {
            background: linear-gradient(135deg, #48bb78, #68d391);
            color: white;
            min-width: 80px;
            box-shadow: 0 4px 15px rgba(72, 187, 120, 0.3);
        }

        .edit-btn::before {
            background: linear-gradient(135deg, #68d391, #9ae6b4);
        }

        .edit-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(72, 187, 120, 0.4);
        }

        .edit-btn:hover::before {
            transform: scaleX(1);
            transform-origin: left;
        }

        .edit-btn:active {
            transform: translateY(1px);
            box-shadow: 0 2px 10px rgba(72, 187, 120, 0.3);
        }

        .delete-btn {
            background: linear-gradient(135deg, #f56565, #fc8181);
            color: white;
            min-width: 80px;
            box-shadow: 0 4px 15px rgba(245, 101, 101, 0.3);
        }

        .delete-btn::before {
            background: linear-gradient(135deg, #fc8181, #feb2b2);
        }

        .delete-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(245, 101, 101, 0.4);
        }

        .delete-btn:hover::before {
            transform: scaleX(1);
            transform-origin: left;
        }

        .delete-btn:active {
            transform: translateY(1px);
            box-shadow: 0 2px 10px rgba(245, 101, 101, 0.3);
        }

        .no-data {
            text-align: center;
            padding: 30px;
            color: #64748b;
            background: rgba(255, 255, 255, 0.8);
            border-radius: 12px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
            opacity: 0;
            animation: fadeInUp 0.6s ease forwards;
            animation-delay: 0.7s;
        }

        .no-data i {
            font-size: 48px;
            color: #3182ce;
            margin-bottom: 16px;
        }

        @keyframes rainbowGradient {
            0% {
                background-position: 0% 50%;
            }

            50% {
                background-position: 100% 50%;
            }

            100% {
                background-position: 0% 50%;
            }
        }

        .warning {
            color: #dc3545;
            font-size: 14px;
            margin-top: 20px;
            text-align: center;
        }

        .modal {
            display: none;
            position: fixed;
            z-index: 1;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.4);
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        .modal.show {
            display: block;
            opacity: 1;
        }

        .modal-content {
            background: linear-gradient(145deg, rgba(255, 255, 255, 0.95), rgba(248, 250, 252, 0.95));
            margin: 15% auto;
            padding: 32px;
            width: 90%;
            max-width: 500px;
            border-radius: 20px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            transform: translateY(-20px);
            opacity: 0;
            transition: all 0.5s cubic-bezier(0.4, 0, 0.2, 1);
            border: 1px solid rgba(226, 232, 240, 0.8);
            backdrop-filter: blur(10px);
            box-sizing: border-box;
        }

        .modal.show .modal-content {
            transform: translateY(0);
            opacity: 1;
        }

        .close {
            color: #64748b;
            float: right;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            position: absolute;
            right: 20px;
            top: 20px;
            width: 32px;
            height: 32px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 50%;
            background: rgba(226, 232, 240, 0.5);
        }

        .close:hover {
            color: #1e293b;
            background: rgba(226, 232, 240, 0.8);
            transform: rotate(90deg);
        }

        .form-group {
            margin-bottom: 24px;
            position: relative;
            width: 100%;
            box-sizing: border-box;
        }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            color: #1e293b;
            font-weight: 500;
            font-size: 14px;
            transition: all 0.3s ease;
        }

        .form-group input {
            width: 100%;
            padding: 12px 16px;
            border: 2px solid #e2e8f0;
            border-radius: 12px;
            font-size: 16px;
            transition: all 0.3s ease;
            background: rgba(255, 255, 255, 0.8);
            box-sizing: border-box;
        }

        .form-group input:focus {
            outline: none;
            border-color: #3182ce;
            box-shadow: 0 0 0 3px rgba(49, 130, 206, 0.1);
        }

        .form-group input:hover {
            border-color: #cbd5e0;
        }

        .submit-btn {
            background: linear-gradient(135deg, #3182ce, #4299e1);
            color: white;
            padding: 12px 24px;
            border: none;
            border-radius: 12px;
            cursor: pointer;
            font-size: 16px;
            font-weight: 500;
            width: 100%;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
            position: relative;
            overflow: hidden;
            z-index: 1;
            box-shadow: 0 4px 15px rgba(49, 130, 206, 0.3);
        }

        .submit-btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(135deg, #4299e1, #63b3ed);
            z-index: -1;
            transition: transform 0.3s ease;
            transform: scaleX(0);
            transform-origin: right;
        }

        .submit-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(49, 130, 206, 0.4);
        }

        .submit-btn:hover::before {
            transform: scaleX(1);
            transform-origin: left;
        }

        .submit-btn:active {
            transform: translateY(1px);
            box-shadow: 0 2px 10px rgba(49, 130, 206, 0.3);
        }

        .modal h2 {
            color: #1e293b;
            font-size: 24px;
            font-weight: 600;
            margin-bottom: 24px;
            display: flex;
            align-items: center;
            gap: 12px;
            opacity: 0;
            transform: translateY(-20px);
            animation: modalContentFadeIn 0.3s ease forwards;
            animation-delay: 0.1s;
        }

        .modal h2 i {
            color: #3182ce;
            transition: transform 0.3s ease;
        }

        .modal h2:hover i {
            transform: scale(1.1);
        }

        @keyframes modalContentFadeIn {
            from {
                opacity: 0;
                transform: translateY(-20px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        /* 通知弹窗样式 */
        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 25px;
            border-radius: 8px;
            color: white;
            display: flex;
            align-items: center;
            gap: 10px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            z-index: 1000;
            animation: slideIn 0.3s ease-out;
            max-width: 400px;
        }

        .notification.success {
            background: linear-gradient(135deg, #00c853, #64dd17);
        }

        .notification.error {
            background: linear-gradient(135deg, #ff5252, #ff1744);
        }

        .notification i {
            font-size: 1.2em;
        }

        @keyframes slideIn {
            from {
                transform: translateX(100%);
                opacity: 0;
            }

            to {
                transform: translateX(0);
                opacity: 1;
            }
        }

        @keyframes fadeOut {
            from {
                opacity: 1;
            }

            to {
                opacity: 0;
            }
        }

        .notification.hide {
            animation: fadeOut 0.3s ease-out forwards;
        }

        /* 确认弹窗样式 */
        .confirm-dialog {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 1000;
            animation: fadeIn 0.3s ease-out;
        }

        .confirm-dialog.show {
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .confirm-content {
            background: linear-gradient(145deg, #ffffff, #f8fafc);
            border-radius: 16px;
            padding: 32px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
            border: 1px solid #e2e8f0;
            width: 100%;
            max-width: 400px;
            animation: slideIn 0.5s ease-out;
            position: relative;
            z-index: 1001;
            opacity: 0;
            animation: fadeInUp 0.5s ease forwards;
            animation-delay: 0.1s;
        }

        .confirm-title {
            font-size: 1.5em;
            color: #2d3748;
            font-weight: 600;
            margin-bottom: 20px;
            display: flex;
            align-items: center;
            gap: 10px;
            opacity: 0;
            transform: translateY(-20px);
            animation: modalContentFadeIn 0.3s ease forwards;
            animation-delay: 0.2s;
        }

        .confirm-message {
            color: #4a5568;
            margin-bottom: 30px;
            line-height: 1.5;
            opacity: 0;
            transform: translateY(-20px);
            animation: modalContentFadeIn 0.3s ease forwards;
            animation-delay: 0.3s;
        }

        .confirm-buttons {
            display: flex;
            gap: 15px;
            justify-content: flex-end;
            opacity: 0;
            transform: translateY(-20px);
            animation: modalContentFadeIn 0.3s ease forwards;
            animation-delay: 0.4s;
        }

        .confirm-btn {
            padding: 12px 24px;
            border-radius: 8px;
            font-size: 1em;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 8px;
            position: relative;
            overflow: hidden;
            z-index: 1;
        }

        .confirm-btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: -1;
            transition: transform 0.3s ease;
            transform: scaleX(0);
            transform-origin: right;
        }

        .confirm-btn.cancel {
            background: linear-gradient(135deg, #e2e8f0, #cbd5e0);
            color: #4a5568;
            border: none;
            box-shadow: 0 4px 15px rgba(226, 232, 240, 0.3);
        }

        .confirm-btn.cancel::before {
            background: linear-gradient(135deg, #cbd5e0, #e2e8f0);
        }

        .confirm-btn.cancel:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(226, 232, 240, 0.4);
        }

        .confirm-btn.cancel:hover::before {
            transform: scaleX(1);
            transform-origin: left;
        }

        .confirm-btn.cancel:active {
            transform: translateY(1px);
            box-shadow: 0 2px 10px rgba(226, 232, 240, 0.3);
        }

        .confirm-btn.delete {
            background: linear-gradient(135deg, #ff5252, #ff1744);
            color: white;
            border: none;
            box-shadow: 0 4px 15px rgba(255, 23, 68, 0.3);
        }

        .confirm-btn.delete::before {
            background: linear-gradient(135deg, #ff1744, #ff5252);
        }

        .confirm-btn.delete:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(255, 23, 68, 0.4);
        }

        .confirm-btn.delete:hover::before {
            transform: scaleX(1);
            transform-origin: left;
        }

        .confirm-btn.delete:active {
            transform: translateY(1px);
            box-shadow: 0 2px 10px rgba(255, 23, 68, 0.3);
        }

        @keyframes fadeIn {
            from {
                opacity: 0;
            }

            to {
                opacity: 1;
            }
        }

        @keyframes slideIn {
            from {
                transform: translateY(-20px);
                opacity: 0;
            }

            to {
                transform: translateY(0);
                opacity: 1;
            }
        }

        #editForm {
            width: 100%;
            box-sizing: border-box;
        }

        @keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(20px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .section-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            opacity: 0;
            animation: fadeInUp 0.6s ease forwards;
            animation-delay: 0.3s;
        }

        .section-title {
            display: flex;
            align-items: center;
            gap: 12px;
            color: #2d3748;
            font-size: 1.5em;
            font-weight: 600;
        }
    </style>
</head>

<body>
    <div class="container">
        <h1>
            <i class="fas fa-database"></i>
            数据库后台管理
        </h1>

        <div class="section-header">
            <h2 class="section-title">
                <i class="fas fa-user"></i>
                用户数据
            </h2>
            <div style="display: flex; gap: 10px;">
                <div class="search-container" style="position: relative;">
                    <input type="text" id="userSearch" placeholder="输入用户ID搜索" style="
                        padding: 8px 16px;
                        border: 2px solid #e2e8f0;
                        border-radius: 12px;
                        font-size: 14px;
                        width: 200px;
                        transition: all 0.3s ease;
                    ">
                    <button class="refresh-btn" onclick="searchUser()" style="
                        position: absolute;
                        right: 0;
                        top: 0;
                        height: 100%;
                        border-radius: 0 12px 12px 0;
                        padding: 0 12px;
                    ">
                        <i class="fas fa-search"></i>
                    </button>
                </div>
                <button class="refresh-btn" onclick="showAddUserModal()">
                    <i class="fas fa-user-plus"></i>
                    新增用户
                </button>
            </div>
        </div>
        <% if (users && users.length> 0) { %>
            <table>
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>用户名</th>
                        <th>密码</th>
                        <th>操作</th>
                    </tr>
                </thead>
                <tbody>
                    <% users.forEach(function(user) { %>
                        <tr>
                            <td>
                                <%= user.id %>
                            </td>
                            <td>
                                <%= user.username %>
                            </td>
                            <td>
                                <%= user.password %>
                            </td>
                            <td>
                                <button class="action-btn edit-btn" data-id="<%= user.id %>"
                                    data-username="<%= user.username %>" data-password="<%= user.password %>">
                                    <i class="fas fa-edit"></i>
                                    编辑
                                </button>
                                <button class="action-btn delete-btn" data-id="<%= user.id %>">
                                    <i class="fas fa-trash-alt"></i>
                                    删除
                                </button>
                            </td>
                        </tr>
                        <% }); %>
                </tbody>
            </table>
            <% } else { %>
                <div class="no-data">
                    <i class="fas fa-database"></i>
                    <p>暂无用户数据</p>
                </div>
                <% } %>
    </div>

    <!-- 编辑用户模态框 -->
    <div id="editModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeModal()">&times;</span>
            <h2>
                <i class="fas fa-user-edit"></i>
                编辑用户
            </h2>
            <form id="editForm" onsubmit="return submitEdit(event)">
                <input type="hidden" id="editUserId">
                <div class="form-group">
                    <label for="editUsername">用户名</label>
                    <input type="text" id="editUsername" required>
                </div>
                <div class="form-group">
                    <label for="editPassword">密码</label>
                    <input type="text" id="editPassword" required>
                </div>
                <button type="submit" class="submit-btn">
                    <i class="fas fa-save"></i>
                    保存更改
                </button>
            </form>
        </div>
    </div>

    <div class="container">
        <div class="section-header">
            <h2 class="section-title">
                <i class="fas fa-cube"></i>
                3D模型数据
            </h2>
            <div style="display: flex; gap: 10px;">
                <div class="search-container" style="position: relative;">
                    <input type="text" id="modelSearch" placeholder="输入用户ID搜索" style="
                        padding: 8px 16px;
                        border: 2px solid #e2e8f0;
                        border-radius: 12px;
                        font-size: 14px;
                        width: 200px;
                        transition: all 0.3s ease;
                    ">
                    <button class="refresh-btn" onclick="searchModels()" style="
                        position: absolute;
                        right: 0;
                        top: 0;
                        height: 100%;
                        border-radius: 0 12px 12px 0;
                        padding: 0 12px;
                    ">
                        <i class="fas fa-search"></i>
                    </button>
                </div>
                <button class="refresh-btn" onclick="showAddModelModal()">
                    <i class="fas fa-plus"></i>
                    新增模型
                </button>
            </div>
        </div>
        <div id="modelTableContainer">
            <% if (models && models.length> 0) { %>
                <table>
                    <thead>
                        <tr>
                            <th style="width: 10%">ID</th>
                            <th style="width: 20%">用户ID</th>
                            <th style="width: 50%">模型路径</th>
                            <th style="width: 20%">操作</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% models.forEach(function(model) { %>
                            <tr>
                                <td style="width: 10%">
                                    <%= model.id %>
                                </td>
                                <td style="width: 20%">
                                    <%= model.user_id %>
                                </td>
                                <td style="width: 50%">
                                    <%= model.model_path %>
                                </td>
                                <td style="width: 20%">
                                    <button class="action-btn delete-btn" data-id="<%= model.id %>">
                                        <i class="fas fa-trash-alt"></i>
                                        删除
                                    </button>
                                </td>
                            </tr>
                            <% }); %>
                    </tbody>
                </table>
                <% } else { %>
                    <div class="no-data">
                        <i class="fas fa-cube"></i>
                        <p>暂无3D模型数据</p>
                    </div>
                    <% } %>
        </div>
        <div style="display: flex; justify-content: flex-end; margin-top: 20px;">
            <button class="refresh-btn" onclick="location.reload()">
                <i class="fas fa-sync-alt"></i>
                刷新数据
            </button>
        </div>
    </div>

    <!-- 新增模型模态框 -->
    <div id="addModelModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeAddModelModal()">&times;</span>
            <h2>
                <i class="fas fa-cube"></i>
                新增3D模型
            </h2>
            <form id="addModelForm" onsubmit="return submitAddModel(event)">
                <div class="form-group">
                    <label for="addModelUserId">用户ID</label>
                    <input type="text" id="addModelUserId" required>
                </div>
                <div class="form-group">
                    <label for="addModelPath">模型路径</label>
                    <input type="text" id="addModelPath" required>
                </div>
                <button type="submit" class="submit-btn">
                    <i class="fas fa-save"></i>
                    保存
                </button>
            </form>
        </div>
    </div>

    <!-- 新增用户模态框 -->
    <div id="addUserModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeAddUserModal()">&times;</span>
            <h2>
                <i class="fas fa-user-plus"></i>
                新增用户
            </h2>
            <form id="addUserForm" onsubmit="return submitAddUser(event)">
                <div class="form-group">
                    <label for="addUsername">用户名</label>
                    <input type="text" id="addUsername" required>
                </div>
                <div class="form-group">
                    <label for="addPassword">密码</label>
                    <input type="text" id="addPassword" required>
                </div>
                <button type="submit" class="submit-btn">
                    <i class="fas fa-save"></i>
                    保存
                </button>
            </form>
        </div>
    </div>

    <!-- 确认弹窗 -->
    <div id="confirmDialog" class="confirm-dialog">
        <div class="confirm-content">
            <div class="confirm-title">
                <i class="fas fa-exclamation-triangle"></i>
                确认删除
            </div>
            <div class="confirm-message" id="confirmMessage">
                确定要删除这个用户吗？此操作不可撤销。
            </div>
            <div class="confirm-buttons">
                <button class="confirm-btn cancel" onclick="closeConfirmDialog()">
                    <i class="fas fa-times"></i>
                    取消
                </button>
                <button class="confirm-btn delete" onclick="confirmDelete()">
                    <i class="fas fa-trash-alt"></i>
                    删除
                </button>
            </div>
        </div>
    </div>

    <script>
        let currentUserId = null;
        let currentModelId = null;
        let deleteType = 'user'; // 'user' or 'model'

        // 显示确认弹窗
        function showConfirmDialog(id, type) {
            deleteType = type;
            if (type === 'user') {
                currentUserId = id;
                document.getElementById('confirmMessage').textContent = '确定要删除这个用户吗？此操作不可撤销。';
            } else {
                currentModelId = id;
                document.getElementById('confirmMessage').textContent = '确定要删除这个3D模型吗？此操作不可撤销。';
            }
            document.getElementById('confirmDialog').classList.add('show');
        }

        // 关闭确认弹窗
        function closeConfirmDialog() {
            document.getElementById('confirmDialog').classList.remove('show');
            currentUserId = null;
            currentModelId = null;
        }

        // 确认删除
        function confirmDelete() {
            if (deleteType === 'user' && currentUserId) {
                deleteUser();
            } else if (deleteType === 'model' && currentModelId) {
                deleteModel();
            }
        }

        function deleteUser() {
            fetch(`/api/user/${currentUserId}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
                .then(response => {
                    if (!response.ok) {
                        return response.json().then(data => {
                            throw new Error(data.message || '删除失败');
                        });
                    }
                    return response.json();
                })
                .then(data => {
                    showNotification(data.message || '删除成功');
                    setTimeout(() => {
                        location.reload();
                    }, 1000);
                })
                .catch(error => {
                    console.error('Error:', error);
                    showNotification(error.message || '删除失败，请稍后重试', 'error');
                })
                .finally(() => {
                    closeConfirmDialog();
                });
        }

        function deleteModel() {
            fetch(`/api/models/${currentModelId}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
                .then(response => {
                    if (!response.ok) {
                        return response.json().then(data => {
                            throw new Error(data.error || '删除失败');
                        });
                    }
                    return response.json();
                })
                .then(data => {
                    showNotification(data.message || '删除成功');
                    setTimeout(() => {
                        location.reload();
                    }, 1000);
                })
                .catch(error => {
                    console.error('Error:', error);
                    showNotification(error.message || '删除失败，请稍后重试', 'error');
                })
                .finally(() => {
                    closeConfirmDialog();
                });
        }

        // 修改删除按钮点击事件
        document.querySelectorAll('.delete-btn').forEach(button => {
            button.addEventListener('click', function () {
                const id = this.dataset.id;
                // 通过检查按钮所在的表格标题来确定是用户还是模型
                const table = this.closest('table');
                const tableHeaders = table.querySelectorAll('th');
                const isUserTable = tableHeaders[0].textContent === 'ID' &&
                    tableHeaders[1].textContent === '用户名' &&
                    tableHeaders[2].textContent === '密码';
                const type = isUserTable ? 'user' : 'model';
                showConfirmDialog(id, type);
            });
        });

        // 编辑按钮点击事件
        document.querySelectorAll('.edit-btn').forEach(button => {
            button.addEventListener('click', function () {
                const id = this.dataset.id;
                const username = this.dataset.username;
                const password = this.dataset.password;
                editUser(id, username, password);
            });
        });

        function editUser(id, username, password) {
            document.getElementById('editUserId').value = id;
            document.getElementById('editUsername').value = username;
            document.getElementById('editPassword').value = password;
            const modal = document.getElementById('editModal');
            modal.style.display = 'block';
            // 使用 setTimeout 来确保动画效果
            setTimeout(() => {
                modal.classList.add('show');
            }, 10);
        }

        function closeModal() {
            const modal = document.getElementById('editModal');
            modal.classList.remove('show');
            // 等待动画完成后再隐藏模态框
            setTimeout(() => {
                modal.style.display = 'none';
            }, 300);
        }

        // 显示通知的函数
        function showNotification(message, type = 'success') {
            const notification = document.createElement('div');
            notification.className = `notification ${type}`;
            notification.innerHTML = `
                <i class="fas ${type === 'success' ? 'fa-check-circle' : 'fa-exclamation-circle'}"></i>
                <span>${message}</span>
            `;
            document.body.appendChild(notification);

            // 3秒后自动消失
            setTimeout(() => {
                notification.classList.add('hide');
                setTimeout(() => {
                    document.body.removeChild(notification);
                }, 300);
            }, 3000);
        }

        // 修改编辑提交函数
        function submitEdit(event) {
            event.preventDefault();
            const id = document.getElementById('editUserId').value;
            const username = document.getElementById('editUsername').value;
            const password = document.getElementById('editPassword').value;

            fetch(`/api/user/${id}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    username: username,
                    password: password
                })
            })
                .then(response => {
                    if (!response.ok) {
                        return response.json().then(data => {
                            throw new Error(data.message || '更新失败');
                        });
                    }
                    return response.json();
                })
                .then(data => {
                    showNotification(data.message || '更新成功');
                    setTimeout(() => {
                        location.reload();
                    }, 1000);
                })
                .catch(error => {
                    console.error('Error:', error);
                    showNotification(error.message || '更新失败，请稍后重试', 'error');
                });

            return false;
        }

        // 点击模态框外部关闭
        window.onclick = function (event) {
            if (event.target == document.getElementById('editModal')) {
                closeModal();
            }
        }

        // 显示新增模型模态框
        function showAddModelModal() {
            const modal = document.getElementById('addModelModal');
            modal.style.display = 'block';
            setTimeout(() => {
                modal.classList.add('show');
            }, 10);
        }

        // 关闭新增模型模态框
        function closeAddModelModal() {
            const modal = document.getElementById('addModelModal');
            modal.classList.remove('show');
            setTimeout(() => {
                modal.style.display = 'none';
            }, 300);
        }

        // 提交新增模型
        function submitAddModel(event) {
            event.preventDefault();
            const userId = document.getElementById('addModelUserId').value;
            const modelPath = document.getElementById('addModelPath').value;

            fetch(`/api/models/${userId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    model_path: modelPath
                })
            })
                .then(response => {
                    if (!response.ok) {
                        return response.json().then(data => {
                            if (response.status === 400) {
                                throw new Error('用户ID不存在，请检查用户ID是否正确');
                            } else {
                                throw new Error(data.error || '添加失败，请稍后重试');
                            }
                        });
                    }
                    return response.json();
                })
                .then(data => {
                    showNotification('添加成功');
                    setTimeout(() => {
                        location.reload();
                    }, 1000);
                })
                .catch(error => {
                    console.error('Error:', error);
                    showNotification(error.message, 'error');
                });

            return false;
        }

        // 显示新增用户模态框
        function showAddUserModal() {
            const modal = document.getElementById('addUserModal');
            modal.style.display = 'block';
            setTimeout(() => {
                modal.classList.add('show');
            }, 10);
        }

        // 关闭新增用户模态框
        function closeAddUserModal() {
            const modal = document.getElementById('addUserModal');
            modal.classList.remove('show');
            setTimeout(() => {
                modal.style.display = 'none';
            }, 300);
        }

        // 提交新增用户
        function submitAddUser(event) {
            event.preventDefault();
            const username = document.getElementById('addUsername').value;
            const password = document.getElementById('addPassword').value;

            fetch('/api/user/register', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    username: username,
                    password: password
                })
            })
                .then(response => {
                    if (!response.ok) {
                        return response.json().then(data => {
                            throw new Error(data.error || '添加失败');
                        });
                    }
                    return response.json();
                })
                .then(data => {
                    showNotification('添加成功');
                    setTimeout(() => {
                        location.reload();
                    }, 1000);
                })
                .catch(error => {
                    console.error('Error:', error);
                    showNotification(error.message || '添加失败，请稍后重试', 'error');
                });

            return false;
        }

        // 更新点击模态框外部关闭的处理
        window.onclick = function (event) {
            if (event.target == document.getElementById('editModal')) {
                closeModal();
            }
            if (event.target == document.getElementById('addModelModal')) {
                closeAddModelModal();
            }
            if (event.target == document.getElementById('addUserModal')) {
                closeAddUserModal();
            }
        }

        // 搜索用户数据
        function searchUser() {
            const userId = document.getElementById('userSearch').value.trim();
            const searchUrl = userId ? `/api/user/search/${userId}` : '/api/user/search';

            // 显示加载动画
            const container = document.querySelector('.container:first-child table');
            container.innerHTML = `
                <tbody>
                    <tr>
                        <td colspan="4" style="text-align: center; padding: 20px;">
                            <i class="fas fa-spinner fa-spin" style="font-size: 24px; color: #3182ce;"></i>
                            <p style="margin-top: 10px; color: #64748b;">正在加载数据...</p>
                        </td>
                    </tr>
                </tbody>
            `;

            // 添加延迟以显示加载动画
            setTimeout(() => {
                fetch(searchUrl)
                    .then(response => {
                        if (!response.ok) {
                            return response.json().then(data => {
                                throw new Error(data.message || '获取数据失败');
                            });
                        }
                        return response.json();
                    })
                    .then(data => {
                        if (data.success && data.data) {
                            // 构建表格HTML
                            let tableHtml = `
                                <thead>
                                    <tr>
                                        <th>ID</th>
                                        <th>用户名</th>
                                        <th>密码</th>
                                        <th>操作</th>
                                    </tr>
                                </thead>
                                <tbody>
                            `;

                            // 检查返回的是单个用户还是用户数组
                            const users = Array.isArray(data.data) ? data.data : [data.data];

                            users.forEach((user, index) => {
                                tableHtml += `
                                    <tr style="opacity: 0; transform: translateY(20px); animation: fadeInUp 1.5s ease forwards; animation-delay: ${index * 0.3}s;">
                                        <td>${user.id}</td>
                                        <td>${user.username}</td>
                                        <td>${user.password}</td>
                                        <td>
                                            <button class="action-btn edit-btn" data-id="${user.id}" data-username="${user.username}" data-password="${user.password}">
                                                <i class="fas fa-edit"></i>
                                                编辑
                                            </button>
                                            <button class="action-btn delete-btn" data-id="${user.id}">
                                                <i class="fas fa-trash-alt"></i>
                                                删除
                                            </button>
                                        </td>
                                    </tr>
                                `;
                            });

                            tableHtml += `</tbody>`;
                            container.innerHTML = tableHtml;

                            // 重新绑定删除按钮事件
                            document.querySelectorAll('.delete-btn').forEach(button => {
                                button.addEventListener('click', function () {
                                    const id = this.dataset.id;
                                    const table = this.closest('table');
                                    const tableHeaders = table.querySelectorAll('th');
                                    const isUserTable = tableHeaders[0].textContent === 'ID' &&
                                        tableHeaders[1].textContent === '用户名' &&
                                        tableHeaders[2].textContent === '密码';
                                    const type = isUserTable ? 'user' : 'model';
                                    showConfirmDialog(id, type);
                                });
                            });

                            // 重新绑定编辑按钮事件
                            document.querySelectorAll('.edit-btn').forEach(button => {
                                button.addEventListener('click', function () {
                                    const id = this.dataset.id;
                                    const username = this.dataset.username;
                                    const password = this.dataset.password;
                                    editUser(id, username, password);
                                });
                            });

                            showNotification('搜索成功');
                        } else {
                            container.innerHTML = `
                                <tbody>
                                    <tr>
                                        <td colspan="4" style="text-align: center; padding: 20px;">
                                            <i class="fas fa-exclamation-circle" style="font-size: 24px; color: #e53e3e;"></i>
                                            <p style="margin-top: 10px; color: #64748b;">未找到用户数据</p>
                                        </td>
                                    </tr>
                                </tbody>
                            `;
                            showNotification('未找到用户数据', 'error');
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        container.innerHTML = `
                            <tbody>
                                <tr>
                                    <td colspan="4" style="text-align: center; padding: 20px;">
                                        <i class="fas fa-exclamation-circle" style="font-size: 24px; color: #e53e3e;"></i>
                                        <p style="margin-top: 10px; color: #64748b;">${error.message || '搜索失败，请稍后重试'}</p>
                                    </td>
                                </tr>
                            </tbody>
                        `;
                        showNotification(error.message || '搜索失败，请稍后重试', 'error');
                    });
            }, 800); // 增加加载动画显示时间
        }

        // 搜索模型数据
        function searchModels() {
            const userId = document.getElementById('modelSearch').value.trim();
            const searchUrl = userId ? `/api/models/${userId}` : '/api/models';

            // 显示加载动画
            const container = document.getElementById('modelTableContainer');
            container.innerHTML = `
                <div style="text-align: center; padding: 20px;">
                    <i class="fas fa-spinner fa-spin" style="font-size: 24px; color: #3182ce;"></i>
                    <p style="margin-top: 10px; color: #64748b;">正在加载数据...</p>
                </div>
            `;

            // 添加延迟以显示加载动画
            setTimeout(() => {
                fetch(searchUrl)
                    .then(response => {
                        if (!response.ok) {
                            return response.json().then(data => {
                                throw new Error(data.message || '获取数据失败');
                            });
                        }
                        return response.json();
                    })
                    .then(data => {
                        if (data.success && data.data && data.data.length > 0) {
                            // 构建表格HTML
                            let tableHtml = `
                                <table>
                                    <thead>
                                        <tr>
                                            <th style="width: 10%">ID</th>
                                            <th style="width: 20%">用户ID</th>
                                            <th style="width: 50%">模型路径</th>
                                            <th style="width: 20%">操作</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                            `;

                            data.data.forEach((model, index) => {
                                tableHtml += `
                                    <tr style="opacity: 0; transform: translateY(20px); animation: fadeInUp 1.5s ease forwards; animation-delay: ${index * 0.3}s;">
                                        <td style="width: 10%">${index + 1}</td>
                                        <td style="width: 20%">${model.user_id}</td>
                                        <td style="width: 50%">${model.model_path}</td>
                                        <td style="width: 20%">
                                            <button class="action-btn delete-btn" data-id="${model.id}">
                                                <i class="fas fa-trash-alt"></i>
                                                删除
                                            </button>
                                        </td>
                                    </tr>
                                `;
                            });

                            tableHtml += `
                                    </tbody>
                                </table>
                            `;
                            container.innerHTML = tableHtml;

                            // 重新绑定删除按钮事件
                            document.querySelectorAll('.delete-btn').forEach(button => {
                                button.addEventListener('click', function () {
                                    const id = this.dataset.id;
                                    const table = this.closest('table');
                                    const tableHeaders = table.querySelectorAll('th');
                                    const isUserTable = tableHeaders[0].textContent === 'ID' &&
                                        tableHeaders[1].textContent === '用户名' &&
                                        tableHeaders[2].textContent === '密码';
                                    const type = isUserTable ? 'user' : 'model';
                                    showConfirmDialog(id, type);
                                });
                            });

                            // 重新绑定编辑按钮事件
                            document.querySelectorAll('.edit-btn').forEach(button => {
                                button.addEventListener('click', function () {
                                    const id = this.dataset.id;
                                    const username = this.dataset.username;
                                    const password = this.dataset.password;
                                    editUser(id, username, password);
                                });
                            });

                            showNotification('搜索成功');
                        } else {
                            container.innerHTML = `
                                <div class="no-data">
                                    <i class="fas fa-cube"></i>
                                    <p>未找到模型数据</p>
                                </div>
                            `;
                            showNotification('未找到数据', 'error');
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        container.innerHTML = `
                            <div class="no-data">
                                <i class="fas fa-exclamation-circle"></i>
                                <p>${error.message || '搜索失败，请稍后重试'}</p>
                            </div>
                        `;
                        showNotification(error.message || '搜索失败，请稍后重试', 'error');
                    });
            }, 800); // 增加加载动画显示时间
        }

        // 添加回车键搜索功能
        document.getElementById('userSearch').addEventListener('keypress', function (e) {
            if (e.key === 'Enter') {
                searchUser();
            }
        });

        document.getElementById('modelSearch').addEventListener('keypress', function (e) {
            if (e.key === 'Enter') {
                searchModels();
            }
        });
    </script>
</body>

</html>